import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { GridListService } from './grid-list.service';
import { DxDataGridComponent } from 'devextreme-angular';
import CustomStore from 'devextreme/data/custom_store';
import { exportDataGrid } from 'devextreme/excel_exporter';
import { exportDataGrid as exportDataGridToPdf } from 'devextreme/pdf_exporter';
import * as ExcelJS from 'exceljs/dist/exceljs.min.js';
import { saveAs } from 'file-saver-es';
import * as jsPDF from 'jspdf';
import * as moment from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../@core/service/auth.service";
import * as i3 from "../../@core/service/local.service";
import * as i4 from "devextreme-angular";
import * as i5 from "devextreme-angular/ui/nested";
import * as i6 from "@angular/common";
import * as i7 from "devextreme-angular/core";
import * as i8 from "@angular/material/tooltip";
export class GridListComponent {
    constructor(router, auth, localstorage) {
        this.router = router;
        this.auth = auth;
        this.localstorage = localstorage;
        this.dataList = [];
        this.currentPage = new EventEmitter();
        this.pageIndex = new EventEmitter();
        this.currentSize = new EventEmitter();
        this.editTableRow = new EventEmitter();
        this.viewTableRow = new EventEmitter();
        this.deleteTableRow = new EventEmitter();
        this.openExternalLink = new EventEmitter();
        this.openpopupLink = new EventEmitter();
        this.routeTo = new EventEmitter();
        this.openPopup = new EventEmitter();
        this.duplicateRow = new EventEmitter();
        this.sortOrder = new EventEmitter();
        this.filterSearchValue = new EventEmitter();
        this.filterBuilderPopup = new EventEmitter();
        this.filterPanel = new EventEmitter();
        this.multipleFilterValues = new EventEmitter();
        this.downloadTableRow = new EventEmitter();
        this.toggleRow = new EventEmitter();
        this.outComeTableRow = new EventEmitter();
        this.downloadFormResponseFiles = new EventEmitter();
        this.deleteFormResponseFiles = new EventEmitter();
        this.rowSelection = new EventEmitter();
        this.navigate = new EventEmitter();
        this.multipleFilterValueToAPI = new EventEmitter();
        this.selectedRowsData = new EventEmitter();
        this.contentReady = e => {
            const reorderColumns = e.component.instance().getVisibleColumns();
            // console.log(reorderColumns, 'reorderColumns');
        };
        /**
         * initiating the grid list
         */
        this.loadGWithParam();
        /**
         * fetching login details from local storage
         */
        this.user = this.localstorage.getObj('user');
        this.displayMode = 'compact';
        this.currentFilter = 'auto';
    }
    set pageSize(value) {
        if (value) {
            this.currentPageSize = value;
        }
        else {
            this.currentPageSize = 20;
        }
    }
    ngOnInit() {
        this.rUrl = this.router.url.split('/');
        this.tempColumns = this.columns;
        if (this.columns && this.columns.gridConfigFormArray) {
            this.columnHeader = this.columns.gridConfigFormArray.map(column => column.header);
            this.columns = this.columns.gridConfigFormArray;
        }
        else {
            this.columnHeader = this.columns.map(column => column.header);
        }
        this.popupPosition = { of: window, at: 'top', my: 'top', offset: { y: 10 } };
        this.filterValue = [];
        this.customOperations = [];
    }
    /**
     * re-render the grid when input data is changed.
     */
    ngOnChanges() {
        this.loadGWithParam();
    }
    /**
     * Rendering data grid condition wise that login user is admin or not
     */
    loadGWithParam() {
        if (!this.auth.isAdmin()) {
            this.loadGrid({ value: !this.Organization ? this.auth.getOrgID() : this.Organization }, false);
        }
        else {
            this.loadGrid({ value: this.Organization ? this.Organization : 'Select-ALL' }, false);
        }
    }
    ngAfterViewInit() {
        /**
         * Datagrid even listener we can customize column event
         */
        this.dataGrid.onRowClick.subscribe(row => {
            this.selectedRowsData.emit(row);
        });
        this.dataGrid.onOptionChanged.subscribe(e => {
            if (e.name === 'columns' && e.fullName.endsWith('filterValues')) {
                const colIndex = Number(e.fullName
                    .match(/\[\d+\]/)[0]
                    .replace('[', '')
                    .replace(']', ''));
                e.component.columnOption(colIndex, 'filterValues');
                this.multipleFilterValues.emit(e);
            }
            // Search
            if (e.name === 'columns' && e.fullName.endsWith('filterValue')) {
                console.log(e);
                this.filterSearchValue.emit(e);
            }
            // filter Builder Popup
            if (e.name === 'filterBuilderPopup') {
                console.log('filterBuilderPopup');
                console.log(e);
                this.filterBuilderPopup.emit(e);
            }
            // filter Panel - enable or disable
            if (e.name === 'filterPanel') {
                console.log(e.value);
                this.filterPanel.emit(e);
            }
            // Sorting
            if (e.name === 'columns' && e.fullName.endsWith('sortOrder')) {
                this.sortOrder.emit(e);
            }
            // Paging
            if (e.name === 'paging') {
                this.currentPage.emit(e.value);
            }
            // pageIndex
            if (e.fullName === 'paging.pageIndex') {
                this.pageIndex.emit(e.value);
            }
            // pageSize
            if (e.fullName === 'paging.pageSize') {
                this.currentSize.emit(e.value);
            }
        });
    }
    /**
     * Generating data grid and restructuring data for Developer grid
     * @param orgID origination details
     * @param load optional boolean is for checking data should load organization respective or all
     */
    loadGrid(orgID, load = true) {
        var _a;
        this.Organization = orgID.value;
        if (load) {
            this.currentPage.emit(orgID.value === 'Select-ALL' ? 'all' : orgID.value);
        }
        if (((_a = this.dataList) === null || _a === void 0 ? void 0 : _a.length) && this.rUrl && this.rUrl[2] === 'view-dashboard') {
            this.dUrl = 'view-dashboard/dashboard';
            this.router.navigateByUrl(`pages/${this.dUrl}/${this.dataList[0]['id']}`);
        }
        this.customStore = new CustomStore({
            load: _opts => {
                this.multipleFilterValueToAPI.emit(_opts.filter);
                return Promise.resolve(this.dataList);
            },
            totalCount: _opts => {
                return Promise.resolve(this.totalCount);
            }
        });
    }
    getRouter(data) {
        this.routeTo.emit(data);
    }
    navigateTo(data) {
        this.navigate.emit(data);
    }
    popup(data) {
        this.openPopup.emit(data);
    }
    downloadData(evt) {
        this.downloadTableRow.emit(evt);
    }
    editData(evt) {
        this.editTableRow.emit(evt);
    }
    editDataMyApplciation(evt) {
        this.editTableRow.emit(evt);
    }
    editAppeal(evt) {
        this.editTableRow.emit(evt);
    }
    onSelectionChanged(evt) {
        this.rowSelection.emit(evt);
    }
    viewData(evt) {
        this.viewTableRow.emit(evt);
    }
    deleteData(evt) {
        this.deleteTableRow.emit(evt);
    }
    duplicateDate(evt) {
        this.duplicateRow.emit(evt);
    }
    openLink(evt) {
        this.openExternalLink.emit(evt);
    }
    openPopupLink(evt) {
        this.openpopupLink.emit(evt);
    }
    activeUser(evt) {
        this.toggleRow.emit(evt);
    }
    getVisabilityByChoosableProp(chooser, visible) {
        if (chooser) {
            return visible;
        }
        else {
            return true;
        }
    }
    getSortOrder(defaultSortColumn, defaultSortType, columnDef) {
        if (defaultSortColumn && defaultSortType) {
            return defaultSortColumn === columnDef ? defaultSortType : '';
        }
        return '';
    }
    outComeData(evt) {
        this.outComeTableRow.emit(evt);
    }
    downloadFormResponseAttachments(evt) {
        this.downloadFormResponseFiles.emit(evt);
    }
    deleteFormResponseAttachments(evt) {
        this.deleteFormResponseFiles.emit(evt);
    }
    onRowPrepared(e) {
        if (e.rowType == 'data' && e.data.isnew) {
            const element = e.rowElement;
            element.classList.add('isnew');
        }
    }
    onCellPrepared(e) {
        var _a, _b;
        if (e.rowType == 'data') {
            if (e.column.dataField === 'notice') {
                const element = e.cellElement;
                e.cellElement.innerHTML = '';
                const livetext = document.createElement('div');
                this.checkOncellprepare(e, livetext);
                element.appendChild(livetext);
            }
            else if (e.column.dataField === 'notificationEventChannels') {
                const element = e.cellElement;
                e.cellElement.innerHTML = '';
                const livetext = document.createElement('div');
                let ele = '';
                e.data.notificationEventChannels.map(t => {
                    if (t.templatename) {
                        ele += `<label>${t.templatename}&nbsp;(<b>${t.templatechannel}</b>)</label>,`;
                    }
                });
                livetext.innerHTML = ele;
                element.appendChild(livetext);
            }
            else if (e.column.dataField === 'link') {
                const element = e.cellElement;
                e.cellElement.innerHTML = '';
                const livetext = document.createElement('div');
                livetext.innerHTML = `<img  src="${e.data.link ? (_b = (_a = e.data) === null || _a === void 0 ? void 0 : _a.link) === null || _b === void 0 ? void 0 : _b.split('?')[0] : ''}"style="max-width: 45px; cursor: pointer"/>`;
                element.appendChild(livetext);
            }
            this.checkCellprepare(e);
        }
    }
    checkCellprepare(e) {
        var _a, _b, _c, _d;
        if (e.column.dataField === 'status' && e.data['tabname'] === 'RECORDS' && e.data['status'] === 'NO MATCH') {
            const element = e.cellElement;
            const livetext = document.createElement('span');
            livetext.classList.add('ml-2');
            livetext.innerHTML = `<em class="fa fa-info-circle" aria-hidden="true" title="${(_b = (_a = e.data) === null || _a === void 0 ? void 0 : _a.execution_error) === null || _b === void 0 ? void 0 : _b.error}" ></em>`;
            if ((_d = (_c = e.data) === null || _c === void 0 ? void 0 : _c.execution_error) === null || _d === void 0 ? void 0 : _d.error) {
                element.appendChild(livetext);
            }
        }
    }
    checkOncellprepare(e, livetext) {
        if (e.value !== 'No Data Found') {
            livetext.innerHTML = `<a class="btn-link loginLabel" href="${e.value}" target="_blank">Click Here<a>`;
        }
        else {
            livetext.innerHTML = 'No Data Found';
        }
    }
    onExporting(e) {
        const pageName = this.localstorage.getObj('FILE EXPORT NAME');
        const currentDate = moment().format('YYYY-MM-DD');
        let fileName;
        if (pageName) {
            fileName = `${pageName} Versions ${currentDate}`;
        }
        else if (this.exportPageName) {
            fileName = `${this.exportPageName}-${currentDate}`;
        }
        else {
            fileName = `Dynamic-Pages ${currentDate}`;
        }
        if (e.format === 'pdf') {
            const doc = new jsPDF.jsPDF();
            exportDataGridToPdf({
                jsPDFDocument: doc,
                component: e.component
            }).then(() => {
                doc.save(`${fileName}.pdf`);
            });
        }
        else if (e.format === 'xlsx') {
            e.fileName = fileName;
        }
        else if (e.format === 'csv') {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Main sheet');
            exportDataGrid({
                component: e.component,
                worksheet: worksheet
            }).then(function () {
                workbook.csv.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), `${fileName}.csv`);
                });
            });
            e.cancel = true;
        }
    }
    customizeHeaderFilterData(options) {
        options.dataSource.postProcess = results => {
            results.map(x => {
                x.text = x[options.dataSource.group[0].selector];
                x.value = [options.dataSource.group[0].selector, '=', x[options.dataSource.group[0].selector]];
                return x;
            });
            console.log(results, 'update customizeHeaderFilterData');
            return results;
        };
    }
}
GridListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GridListComponent, deps: [{ token: i1.Router }, { token: i2.AuthService }, { token: i3.LocalService }], target: i0.ɵɵFactoryTarget.Component });
GridListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: GridListComponent, selector: "app-grid-list", inputs: { dataList: "dataList", dataSource: "dataSource", columns: "columns", updateGrid: "updateGrid", totalCount: "totalCount", page: "page", isShow: "isShow", remoteOperations: "remoteOperations", enableExport: "enableExport", showHeaderFilter: "showHeaderFilter", exportPageName: "exportPageName", pageSize: "pageSize" }, outputs: { currentPage: "currentPage", pageIndex: "pageIndex", currentSize: "currentSize", editTableRow: "editTableRow", viewTableRow: "viewTableRow", deleteTableRow: "deleteTableRow", openExternalLink: "openExternalLink", openpopupLink: "openpopupLink", routeTo: "routeTo", openPopup: "openPopup", duplicateRow: "duplicateRow", sortOrder: "sortOrder", filterSearchValue: "filterSearchValue", filterBuilderPopup: "filterBuilderPopup", filterPanel: "filterPanel", multipleFilterValues: "multipleFilterValues", downloadTableRow: "downloadTableRow", toggleRow: "toggleRow", outComeTableRow: "outComeTableRow", downloadFormResponseFiles: "downloadFormResponseFiles", deleteFormResponseFiles: "deleteFormResponseFiles", rowSelection: "rowSelection", navigate: "navigate", multipleFilterValueToAPI: "multipleFilterValueToAPI", selectedRowsData: "selectedRowsData" }, providers: [GridListService], viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DxDataGridComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<dx-data-grid\r\n  id=\"gridContainer\"\r\n  [dataSource]=\"customStore\"\r\n  [allowColumnReordering]=\"true\"\r\n  [allowColumnResizing]=\"true\"\r\n  [columnAutoWidth]=\"true\"\r\n  [showBorders]=\"true\"\r\n  [rowAlternationEnabled]=\"updateGrid?.rowSelection ? false : true\"\r\n  [showColumnLines]=\"true\"\r\n  [showRowLines]=\"true\"\r\n  [filterValue]=\"filterValue\"\r\n  [remoteOperations]=\"remoteOperations ? remoteOperations : false\"\r\n  [hoverStateEnabled]=\"updateGrid?.rowSelection\"\r\n  (onSelectionChanged)=\"onSelectionChanged($event)\"\r\n  (onRowPrepared)=\"onRowPrepared($event)\"\r\n  (onCellPrepared)=\"onCellPrepared($event)\"\r\n  (onContentReady)=\"contentReady($event)\"\r\n  (onExporting)=\"onExporting($event)\">\r\n  <dxo-load-panel [enabled]=\"false\"></dxo-load-panel>\r\n  <dxo-filter-panel [visible]=\"false\"></dxo-filter-panel>\r\n  <dxo-paging [pageSize]=\"currentPageSize\"></dxo-paging>\r\n  <dxo-pager\r\n    [visible]=\"true\"\r\n    [allowedPageSizes]=\"[10, 25, 50, 100]\"\r\n    [displayMode]=\"displayMode\"\r\n    [showPageSizeSelector]=\"true\"\r\n    [showInfo]=\"true\"\r\n    [showNavigationButtons]=\"true\"></dxo-pager>\r\n  <!--end pagination-->\r\n\r\n  <dxo-export [enabled]=\"enableExport\" [formats]=\"['xlsx', 'csv']\"></dxo-export>\r\n\r\n  <dxo-filter-builder [customOperations]=\"customOperations\"> </dxo-filter-builder>\r\n  <dxo-filter-builder-popup [position]=\"popupPosition\"> </dxo-filter-builder-popup>\r\n\r\n  <dxo-filter-row [visible]=\"showHeaderFilter\" [applyFilter]=\"currentFilter\"></dxo-filter-row>\r\n  <dxo-header-filter [visible]=\"true\" [allowSearch]=\"false\"></dxo-header-filter>\r\n  <dxo-selection mode=\"single\" *ngIf=\"updateGrid?.rowSelection\"></dxo-selection>\r\n  <ng-container *ngFor=\"let column of columns; let i = index\">\r\n    <ng-container *ngIf=\"column?.hide !== true\">\r\n      <ng-container *ngIf=\"column?.link; else noLink\">\r\n        <dxi-column\r\n          [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n          [allowHiding]=\"!column?.Choosable\"\r\n          [fixed]=\"column?.fixed\"\r\n          [dataField]=\"column?.columnDef\"\r\n          [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n          [caption]=\"column?.header\"\r\n          [allowFiltering]=\"column?.filter\"\r\n          cellTemplate=\"cellTemplate\"\r\n          [allowSorting]=\"column?.sort\"\r\n          [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n          <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n        </dxi-column>\r\n      </ng-container>\r\n      <ng-template #noLink>\r\n        <ng-container *ngIf=\"column?.icon; else noIcon\">\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            cellTemplate=\"iconTemplate\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n        </ng-container>\r\n      </ng-template>\r\n      <ng-template #noIcon>\r\n        <ng-container *ngIf=\"column?.dateFormat; else noDate\">\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            *ngIf=\"column?.datetext === 'MMDD24'\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            dataType=\"date\"\r\n            format=\"MM/dd/yyyy, HH:mm\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            *ngIf=\"column?.datetext === 'MDY'\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            dataType=\"date\"\r\n            format=\"MM/dd/yyyy\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            *ngIf=\"column?.datetext !== 'MDY' && column?.datetext !== 'MMDD24'\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            dataType=\"date\"\r\n            [format]=\"column?.removeTime ? 'MM/dd/yyyy' : 'MM/dd/yyyy, hh:mm a'\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n        </ng-container>\r\n      </ng-template>\r\n      <ng-template #noDate>\r\n        <dxi-column\r\n          [dataField]=\"column.columnDef\"\r\n          [caption]=\"column.header\"\r\n          [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n          [allowFiltering]=\"column.filter\">\r\n          <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n        </dxi-column>\r\n        <ng-container *ngIf=\"column?.header.toLowerCase().trim() === 'status'\">\r\n          <dxi-column\r\n            [visible]=\"getVisabilityByChoosableProp(updateGrid?.chooser, column?.visible)\"\r\n            [allowHiding]=\"!column?.Choosable\"\r\n            [fixed]=\"column?.fixed\"\r\n            [dataField]=\"column?.columnDef\"\r\n            [filterOperations]=\"column?.filterOperations ? column?.filterOperations : ''\"\r\n            [caption]=\"column?.header\"\r\n            [allowFiltering]=\"column?.filter\"\r\n            cellTemplate=\"statusTemplate\"\r\n            [allowSorting]=\"column?.sort\"\r\n            [sortOrder]=\"getSortOrder(updateGrid?.defaultSortColumn, updateGrid?.defaultSortType, column?.columnDef)\">\r\n            <dxo-header-filter [dataSource]=\"customizeHeaderFilterData\"></dxo-header-filter>\r\n          </dxi-column>\r\n        </ng-container>\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container\r\n    *ngIf=\"\r\n      updateGrid &&\r\n      (updateGrid?.externalLink ||\r\n        updateGrid?.openPopup ||\r\n        updateGrid?.edit ||\r\n        updateGrid?.editMyApplication ||\r\n        updateGrid?.editAppeal ||\r\n        updateGrid?.editBilling ||\r\n        updateGrid?.delete ||\r\n        updateGrid?.delete ||\r\n        updateGrid?.download ||\r\n        updateGrid?.showDownload ||\r\n        updateGrid?.showDelete ||\r\n        updateGrid?.pdf)\r\n    \">\r\n    <dxi-column\r\n      [width]=\"100\"\r\n      [allowFiltering]=\"false\"\r\n      [allowSorting]=\"false\"\r\n      caption=\"Action\"\r\n      cellTemplate=\"editCellTemplate\"></dxi-column>\r\n    <!-- Action label added for admin grid -->\r\n\r\n    <div *dxTemplate=\"let d of 'editCellTemplate'\">\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.externalLink\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Open\"\r\n        (click)=\"openLink(d)\">\r\n        <em class=\"fa fa-external-link\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Appeal\"\r\n        *ngIf=\"updateGrid?.appeal\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Appeal\"\r\n        (click)=\"navigateTo(d)\">\r\n        <em class=\"fa fa-external-link\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.showDownload && !updateGrid?.isNewlyUploaded\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Download File\"\r\n        (click)=\"downloadFormResponseAttachments(d)\">\r\n        <em class=\"fa fa-download\" aria-hidden=\"true\"></em> </a\r\n      >&nbsp;&nbsp;\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.showDelete\"\r\n        class=\"no-bg text-danger\"\r\n        matTooltip=\"Delete File\"\r\n        (click)=\"deleteFormResponseAttachments(d)\">\r\n        <em class=\"fa fa-trash\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.openPopup\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Open\"\r\n        (click)=\"openPopupLink(d)\">\r\n        <em class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.duplicate\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Copy\"\r\n        (click)=\"duplicateDate(d)\">\r\n        <em class=\"fa fa-copy\" aria-hidden=\"true\"\r\n          ><span class=\"sr-only\">Copy</span></em\r\n        >\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.download\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"Download\"\r\n        (click)=\"downloadData(d)\">\r\n        <em class=\"fa fa-download\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.edit && !d.data?.extendedProps?.outcome\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editData(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n      href=\"javascript:void(0)\"\r\n      *ngIf=\"updateGrid?.editRecord\"\r\n      class=\"no-bg mr-2\"\r\n      matTooltip=\"Edit\"\r\n      (click)=\"editData(d)\">\r\n      <em class=\"fa fa-pencil\" aria-hidden=\"true\"><span class=\"sr-only\">Edit</span></em>\r\n      <span class=\"sr-only\">View</span>\r\n    </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.editMyApplication && d?.data?.application_status === 'In Progress'\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editDataMyApplciation(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.editAppeal && d?.data?.status === 'In Progress'\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editAppeal(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"Edit\"\r\n        *ngIf=\"updateGrid?.editBilling && d?.data?.status === 'Waiting for approval'\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"Edit\"\r\n        (click)=\"editAppeal(d)\">\r\n        <em class=\"fa fa-pencil\" title=\"Edit\" aria-hidden=\"true\" style=\"font-size: 13px\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"View\"\r\n        *ngIf=\"updateGrid?.view\"\r\n        class=\"no-bg mr-2\"\r\n        matTooltip=\"View\"\r\n        (click)=\"viewData(d)\">\r\n        <em class=\"fa fa-eye\" title=\"View\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        title=\"delete\"\r\n        *ngIf=\"updateGrid?.delete\"\r\n        class=\"no-bg text-danger\"\r\n        matTooltip=\"Delete\"\r\n        (click)=\"deleteData(d)\">\r\n        <em class=\"fa fa-trash\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a\r\n        href=\"javascript:void(0)\"\r\n        *ngIf=\"updateGrid?.outcome && d.data?.extendedProps?.outcome\"\r\n        class=\"no-bg\"\r\n        matTooltip=\"View\"\r\n        (click)=\"outComeData(d)\">\r\n        <em class=\"fa fa-eye\" title=\"View\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <a href=\"javascript:void(0)\" title=\"pdf\" *ngIf=\"updateGrid?.pdf\" class=\"no-bg\" matTooltip=\"PDF\">\r\n        <em class=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></em>\r\n      </a>\r\n      <button\r\n        *ngIf=\"updateGrid?.toggle\"\r\n        class=\"no-bg\"\r\n        [matTooltip]=\"d.data.isactive === true ? 'Deactivate' : 'Activate'\"\r\n        (click)=\"activeUser(d)\">\r\n        <em *ngIf=\"updateGrid?.toggle && d.data.isactive === true\" class=\"fa fa-toggle-on\"></em>\r\n        <em *ngIf=\"updateGrid?.toggle && d.data.isactive === false\" class=\"fa fa-toggle-off\"></em>\r\n      </button>\r\n      <button *ngIf=\"updateGrid?.activeordeactive\" class=\"no-bg\" (click)=\"deleteData(d)\">\r\n        <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 1\" class=\"fa fa-toggle-on\"></em>\r\n        <em *ngIf=\"updateGrid?.activeordeactive && d.data.activeflag === 0\" class=\"fa fa-toggle-off\"></em>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n  <div *dxTemplate=\"let d of 'cellTemplate'\">\r\n    <a href=\"javascript:void(0)\" *ngIf=\"d.value && d.value !== 'null'\" (click)=\"getRouter(d)\">{{\r\n      d.value !== 'null' ? d.value : ''\r\n    }}</a>\r\n  </div>\r\n  <div *dxTemplate=\"let d of 'iconTemplate'\">\r\n    <em class=\"fa fa-book\" (click)=\"popup(d.value)\" aria-hidden=\"true\"></em>\r\n  </div>\r\n</dx-data-grid>\r\n<!-- <ng-template #callNarrativePopup>\r\n  <h2 matDialogTitle>Narrative</h2>\r\n  <div [innerHTML]=\"narrativeData\"></div>\r\n  <div class=\"text-right\">\r\n    <button mat-button (click)=\"closeNarrativePopup()\" class=\"btn btn-cancel mr-2\">Close</button>\r\n  </div>\r\n</ng-template> -->\r\n", styles: [".split-page{outline:3px;margin:5px}.searchlist{min-width:620px!important;height:280px!important}.searchlist table,.searchlist table tr th,.searchlist table tr td{padding:0}.dx-datagrid .dx-data-row>td.bullet{padding-top:0;padding-bottom:0}.dx-datagrid .dx-row>tr>td{padding:0!important}.dx-datagrid .dx-row>td{padding:1px 5px!important;vertical-align:middle!important;text-align:center!important}.org-title{margin:0;font-size:12px!important;color:#0079fe}:host ::ng-deep .dx-row.dx-data-row.dx-row-lines.dx-column-lines.isnew{background-color:#f2f2f2}:host ::ng-deep .dx-row.dx-data-row.dx-row-lines.dx-column-lines.isnew td{font-weight:bold}\n"], components: [{ type: i4.DxDataGridComponent, selector: "dx-data-grid", inputs: ["accessKey", "activeStateEnabled", "allowColumnReordering", "allowColumnResizing", "autoNavigateToFocusedRow", "cacheEnabled", "cellHintEnabled", "columnAutoWidth", "columnChooser", "columnFixing", "columnHidingEnabled", "columnMinWidth", "columnResizingMode", "columns", "columnWidth", "customizeColumns", "customizeExportData", "dataRowTemplate", "dataSource", "dateSerializationFormat", "disabled", "editing", "elementAttr", "errorRowEnabled", "export", "filterBuilder", "filterBuilderPopup", "filterPanel", "filterRow", "filterSyncEnabled", "filterValue", "focusedColumnIndex", "focusedRowEnabled", "focusedRowIndex", "focusedRowKey", "focusStateEnabled", "grouping", "groupPanel", "headerFilter", "height", "highlightChanges", "hint", "hoverStateEnabled", "keyboardNavigation", "keyExpr", "loadPanel", "masterDetail", "noDataText", "pager", "paging", "remoteOperations", "renderAsync", "repaintChangesOnly", "rowAlternationEnabled", "rowDragging", "rowTemplate", "rtlEnabled", "scrolling", "searchPanel", "selectedRowKeys", "selection", "selectionFilter", "showBorders", "showColumnHeaders", "showColumnLines", "showRowLines", "sortByGroupSummaryInfo", "sorting", "stateStoring", "summary", "tabIndex", "toolbar", "twoWayBindingEnabled", "visible", "width", "wordWrapEnabled"], outputs: ["onAdaptiveDetailRowPreparing", "onCellClick", "onCellDblClick", "onCellHoverChanged", "onCellPrepared", "onContentReady", "onContextMenuPreparing", "onDataErrorOccurred", "onDisposing", "onEditCanceled", "onEditCanceling", "onEditingStart", "onEditorPrepared", "onEditorPreparing", "onExported", "onExporting", "onFileSaving", "onFocusedCellChanged", "onFocusedCellChanging", "onFocusedRowChanged", "onFocusedRowChanging", "onInitialized", "onInitNewRow", "onKeyDown", "onOptionChanged", "onRowClick", "onRowCollapsed", "onRowCollapsing", "onRowDblClick", "onRowExpanded", "onRowExpanding", "onRowInserted", "onRowInserting", "onRowPrepared", "onRowRemoved", "onRowRemoving", "onRowUpdated", "onRowUpdating", "onRowValidating", "onSaved", "onSaving", "onSelectionChanged", "onToolbarPreparing", "accessKeyChange", "activeStateEnabledChange", "allowColumnReorderingChange", "allowColumnResizingChange", "autoNavigateToFocusedRowChange", "cacheEnabledChange", "cellHintEnabledChange", "columnAutoWidthChange", "columnChooserChange", "columnFixingChange", "columnHidingEnabledChange", "columnMinWidthChange", "columnResizingModeChange", "columnsChange", "columnWidthChange", "customizeColumnsChange", "customizeExportDataChange", "dataRowTemplateChange", "dataSourceChange", "dateSerializationFormatChange", "disabledChange", "editingChange", "elementAttrChange", "errorRowEnabledChange", "exportChange", "filterBuilderChange", "filterBuilderPopupChange", "filterPanelChange", "filterRowChange", "filterSyncEnabledChange", "filterValueChange", "focusedColumnIndexChange", "focusedRowEnabledChange", "focusedRowIndexChange", "focusedRowKeyChange", "focusStateEnabledChange", "groupingChange", "groupPanelChange", "headerFilterChange", "heightChange", "highlightChangesChange", "hintChange", "hoverStateEnabledChange", "keyboardNavigationChange", "keyExprChange", "loadPanelChange", "masterDetailChange", "noDataTextChange", "pagerChange", "pagingChange", "remoteOperationsChange", "renderAsyncChange", "repaintChangesOnlyChange", "rowAlternationEnabledChange", "rowDraggingChange", "rowTemplateChange", "rtlEnabledChange", "scrollingChange", "searchPanelChange", "selectedRowKeysChange", "selectionChange", "selectionFilterChange", "showBordersChange", "showColumnHeadersChange", "showColumnLinesChange", "showRowLinesChange", "sortByGroupSummaryInfoChange", "sortingChange", "stateStoringChange", "summaryChange", "tabIndexChange", "toolbarChange", "twoWayBindingEnabledChange", "visibleChange", "widthChange", "wordWrapEnabledChange"] }, { type: i5.DxoLoadPanelComponent, selector: "dxo-load-panel", inputs: ["enabled", "height", "indicatorSrc", "shading", "shadingColor", "showIndicator", "showPane", "text", "width"] }, { type: i5.DxoFilterPanelComponent, selector: "dxo-filter-panel", inputs: ["customizeText", "filterEnabled", "texts", "visible"], outputs: ["filterEnabledChange"] }, { type: i5.DxoPagingComponent, selector: "dxo-paging", inputs: ["enabled", "pageIndex", "pageSize"], outputs: ["pageIndexChange", "pageSizeChange"] }, { type: i5.DxoPagerComponent, selector: "dxo-pager", inputs: ["allowedPageSizes", "displayMode", "infoText", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"] }, { type: i5.DxoExportComponent, selector: "dxo-export", inputs: ["backgroundColor", "enabled", "fileName", "formats", "margin", "printingEnabled", "proxyUrl", "svgToCanvas", "allowExportSelectedData", "customizeExcelCell", "excelFilterEnabled", "excelWrapTextEnabled", "ignoreExcelErrors", "texts"] }, { type: i5.DxoFilterBuilderComponent, selector: "dxo-filter-builder", inputs: ["accessKey", "activeStateEnabled", "allowHierarchicalFields", "customOperations", "disabled", "elementAttr", "fields", "filterOperationDescriptions", "focusStateEnabled", "groupOperationDescriptions", "groupOperations", "height", "hint", "hoverStateEnabled", "maxGroupLevel", "onContentReady", "onDisposing", "onEditorPrepared", "onEditorPreparing", "onInitialized", "onOptionChanged", "onValueChanged", "rtlEnabled", "tabIndex", "value", "visible", "width"], outputs: ["valueChange"] }, { type: i5.DxoFilterBuilderPopupComponent, selector: "dxo-filter-builder-popup", inputs: ["accessKey", "animation", "closeOnOutsideClick", "container", "contentTemplate", "copyRootClassesToWrapper", "deferRendering", "disabled", "dragAndResizeArea", "dragEnabled", "dragOutsideBoundary", "elementAttr", "focusStateEnabled", "fullScreen", "height", "hideOnOutsideClick", "hideOnParentScroll", "hint", "hoverStateEnabled", "maxHeight", "maxWidth", "minHeight", "minWidth", "onContentReady", "onDisposing", "onHidden", "onHiding", "onInitialized", "onOptionChanged", "onResize", "onResizeEnd", "onResizeStart", "onShowing", "onShown", "onTitleRendered", "position", "resizeEnabled", "restorePosition", "rtlEnabled", "shading", "shadingColor", "showCloseButton", "showTitle", "tabIndex", "title", "titleTemplate", "toolbarItems", "visible", "width", "wrapperAttr"], outputs: ["heightChange", "positionChange", "visibleChange", "widthChange"] }, { type: i5.DxoFilterRowComponent, selector: "dxo-filter-row", inputs: ["applyFilter", "applyFilterText", "betweenEndText", "betweenStartText", "operationDescriptions", "resetOperationText", "showAllText", "showOperationChooser", "visible"] }, { type: i5.DxoHeaderFilterComponent, selector: "dxo-header-filter", inputs: ["allowSearch", "dataSource", "groupInterval", "height", "searchMode", "width", "searchTimeout", "texts", "visible", "showRelevantValues"] }, { type: i5.DxoSelectionComponent, selector: "dxo-selection", inputs: ["allowSelectAll", "deferred", "mode", "selectAllMode", "showCheckBoxesMode", "recursive"] }, { type: i5.DxiColumnComponent, selector: "dxi-column", inputs: ["alignment", "allowEditing", "allowExporting", "allowFiltering", "allowFixing", "allowGrouping", "allowHeaderFiltering", "allowHiding", "allowReordering", "allowResizing", "allowSearch", "allowSorting", "autoExpandGroup", "buttons", "calculateCellValue", "calculateDisplayValue", "calculateFilterExpression", "calculateGroupValue", "calculateSortValue", "caption", "cellTemplate", "columns", "cssClass", "customizeText", "dataField", "dataType", "editCellTemplate", "editorOptions", "encodeHtml", "falseText", "filterOperations", "filterType", "filterValue", "filterValues", "fixed", "fixedPosition", "format", "formItem", "groupCellTemplate", "groupIndex", "headerCellTemplate", "headerFilter", "hidingPriority", "isBand", "lookup", "minWidth", "name", "ownerBand", "renderAsync", "selectedFilterOperation", "setCellValue", "showEditorAlways", "showInColumnChooser", "showWhenGrouped", "sortIndex", "sortingMethod", "sortOrder", "trueText", "type", "validationRules", "visible", "visibleIndex", "width"], outputs: ["filterValueChange", "filterValuesChange", "groupIndexChange", "selectedFilterOperationChange", "sortIndexChange", "sortOrderChange", "visibleChange", "visibleIndexChange"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.DxTemplateDirective, selector: "[dxTemplate]", inputs: ["dxTemplateOf"] }, { type: i8.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltipPosition", "matTooltipDisabled", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GridListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-grid-list',
                    providers: [GridListService],
                    templateUrl: './grid-list.component.html',
                    styleUrls: ['./grid-list.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.AuthService }, { type: i3.LocalService }]; }, propDecorators: { dataGrid: [{
                type: ViewChild,
                args: [DxDataGridComponent, { static: false }]
            }], dataList: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], columns: [{
                type: Input
            }], updateGrid: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], page: [{
                type: Input
            }], isShow: [{
                type: Input
            }], remoteOperations: [{
                type: Input
            }], enableExport: [{
                type: Input
            }], showHeaderFilter: [{
                type: Input
            }], exportPageName: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], currentPage: [{
                type: Output
            }], pageIndex: [{
                type: Output
            }], currentSize: [{
                type: Output
            }], editTableRow: [{
                type: Output
            }], viewTableRow: [{
                type: Output
            }], deleteTableRow: [{
                type: Output
            }], openExternalLink: [{
                type: Output
            }], openpopupLink: [{
                type: Output
            }], routeTo: [{
                type: Output
            }], openPopup: [{
                type: Output
            }], duplicateRow: [{
                type: Output
            }], sortOrder: [{
                type: Output
            }], filterSearchValue: [{
                type: Output
            }], filterBuilderPopup: [{
                type: Output
            }], filterPanel: [{
                type: Output
            }], multipleFilterValues: [{
                type: Output
            }], downloadTableRow: [{
                type: Output
            }], toggleRow: [{
                type: Output
            }], outComeTableRow: [{
                type: Output
            }], downloadFormResponseFiles: [{
                type: Output
            }], deleteFormResponseFiles: [{
                type: Output
            }], rowSelection: [{
                type: Output
            }], navigate: [{
                type: Output
            }], multipleFilterValueToAPI: [{
                type: Output
            }], selectedRowsData: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BpY3MtbW9kdWxlL2VtYWlsL3NyYy9saWIvcGljcy1lbWFpbC9Ac2hhcmVkL2dyaWQtbGlzdC9ncmlkLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1tb2R1bGUvZW1haWwvc3JjL2xpYi9waWNzLWVtYWlsL0BzaGFyZWQvZ3JpZC1saXN0L2dyaWQtbGlzdC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGNBQWMsSUFBSSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hGLE9BQU8sS0FBSyxPQUFPLE1BQU0sNkJBQTZCLENBQUM7QUFDdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQzs7Ozs7Ozs7OztBQVFqQyxNQUFNLE9BQU8saUJBQWlCO0lBOEQ1QixZQUFvQixNQUFjLEVBQVMsSUFBaUIsRUFBVSxZQUEwQjtRQUE1RSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsU0FBSSxHQUFKLElBQUksQ0FBYTtR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TUFBTTtnQkFDRyxTQUFTO3NCQUFsQixNQUFNO2dCQUNHLFlBQVk7c0JBQXJCLE1BQU07Z0JBQ0csU0FBUztzQkFBbEIsTUFBTTtnQkFDRyxpQkFBaUI7c0JBQTFCLE1BQU07Z0JBQ0csa0JBQWtCO3NCQUEzQixNQUFNO2dCQUNHLFdBQVc7c0JBQXBCLE1BQU07Z0JBQ0csb0JBQW9CO3NCQUE3QixNQUFNO2dCQUNHLGdCQUFnQjtzQkFBekIsTUFBTTtnQkFDRyxTQUFTO3NCQUFsQixNQUFNO2dCQUNHLGVBQWU7c0JBQXhCLE1BQU07Z0JBQ0cseUJBQXlCO3NCQUFsQyxNQUFNO2dCQUNHLHVCQUF1QjtzQkFBaEMsTUFBTTtnQkFDRyxZQUFZO3NCQUFyQixNQUFNO2dCQUNHLFFBQVE7c0JBQWpCLE1BQU07Z0JBQ0csd0JBQXdCO3NCQUFqQyxNQUFNO2dCQUNHLGdCQUFnQjtzQkFBekIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vQGNvcmUvc2VydmljZS9hdXRoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHcmlkTGlzdFNlcnZpY2UgfSBmcm9tICcuL2dyaWQtbGlzdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9jYWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vQGNvcmUvc2VydmljZS9sb2NhbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRHhEYXRhR3JpZENvbXBvbmVudCB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhcic7XHJcbmltcG9ydCBDdXN0b21TdG9yZSBmcm9tICdkZXZleHRyZW1lL2RhdGEvY3VzdG9tX3N0b3JlJztcclxuaW1wb3J0IERhdGFTb3VyY2UgZnJvbSAnZGV2ZXh0cmVtZS9kYXRhL2RhdGFfc291cmNlJztcclxuaW1wb3J0IHsgZXhwb3J0RGF0YUdyaWQgfSBmcm9tICdkZXZleHRyZW1lL2V4Y2VsX2V4cG9ydGVyJztcclxuaW1wb3J0IHsgZXhwb3J0RGF0YUdyaWQgYXMgZXhwb3J0RGF0YUdyaWRUb1BkZiB9IGZyb20gJ2RldmV4dHJlbWUvcGRmX2V4cG9ydGVyJztcclxuaW1wb3J0ICogYXMgRXhjZWxKUyBmcm9tICdleGNlbGpzL2Rpc3QvZXhjZWxqcy5taW4uanMnO1xyXG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyLWVzJztcclxuaW1wb3J0ICogYXMganNQREYgZnJvbSAnanNwZGYnO1xyXG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWdyaWQtbGlzdCcsXHJcbiAgcHJvdmlkZXJzOiBbR3JpZExpc3RTZXJ2aWNlXSxcclxuICB0ZW1wbGF0ZVVybDogJy4vZ3JpZC1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9ncmlkLWxpc3QuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR3JpZExpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQFZpZXdDaGlsZChEeERhdGFHcmlkQ29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSkgZGF0YUdyaWQ6IER4RGF0YUdyaWRDb21wb25lbnQ7XHJcbiAgQElucHV0KCkgZGF0YUxpc3Q6IGFueVtdID0gW107XHJcbiAgQElucHV0KCkgZGF0YVNvdXJjZTogRGF0YVNvdXJjZTtcclxuICBASW5wdXQoKSBjb2x1bW5zOiBhbnk7XHJcbiAgQElucHV0KCkgdXBkYXRlR3JpZDogYW55O1xyXG4gIEBJbnB1dCgpIHRvdGFsQ291bnQ6IG51bWJlcjtcclxuICBASW5wdXQoKSBwYWdlOiBudW1iZXI7XHJcbiAgQElucHV0KCkgaXNTaG93OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHJlbW90ZU9wZXJhdGlvbnM6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZW5hYmxlRXhwb3J0OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHNob3dIZWFkZXJGaWx0ZXI6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgZXhwb3J0UGFnZU5hbWU6IHN0cmluZztcclxuICBASW5wdXQoKSBzZXQgcGFnZVNpemUodmFsdWU6IG51bWJlcikge1xyXG4gICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFBhZ2VTaXplID0gdmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmN1cnJlbnRQYWdlU2l6ZSA9IDIwO1xyXG4gICAgfVxyXG4gIH1cclxuICBAT3V0cHV0KCkgY3VycmVudFBhZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuICBAT3V0cHV0KCkgcGFnZUluZGV4ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIGN1cnJlbnRTaXplID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIGVkaXRUYWJsZVJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSB2aWV3VGFibGVSb3cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZGVsZXRlVGFibGVSb3cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgb3BlbkV4dGVybmFsTGluayA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBvcGVucG9wdXBMaW5rID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHJvdXRlVG8gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgb3BlblBvcHVwID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGR1cGxpY2F0ZVJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBzb3J0T3JkZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZmlsdGVyU2VhcmNoVmFsdWUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZmlsdGVyQnVpbGRlclBvcHVwID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGZpbHRlclBhbmVsID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG11bHRpcGxlRmlsdGVyVmFsdWVzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkVGFibGVSb3cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgdG9nZ2xlUm93ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG91dENvbWVUYWJsZVJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBkb3dubG9hZEZvcm1SZXNwb25zZUZpbGVzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIGRlbGV0ZUZvcm1SZXNwb25zZUZpbGVzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHJvd1NlbGVjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBuYXZpZ2F0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBtdWx0aXBsZUZpbHRlclZhbHVlVG9BUEkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRSb3dzRGF0YSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIGRhdGFGaWVsZDogc3RyaW5nW107XHJcbiAgY29sdW1uSGVhZGVyOiBhbnlbXTtcclxuICBwb3B1cFBvc2l0aW9uOiBhbnk7XHJcbiAgZmlsdGVyVmFsdWU6IChzdHJpbmcgfCBzdHJpbmdbXSlbXTtcclxuICBjdXN0b21PcGVyYXRpb25zOiBBcnJheTxhbnk+O1xyXG4gIGZpZWxkczogYW55O1xyXG4gIGN1c3RvbVN0b3JlOiBhbnk7XHJcbiAgdGVtcENvbHVtbnM6IGFueVtdO1xyXG4gIE9yZ2FuaXphdGlvbjogYW55O1xyXG4gIGRVcmw6IHN0cmluZztcclxuICByZFVybDogc3RyaW5nO1xyXG4gIHJVcmw6IGFueTtcclxuICB1c2VyOiBhbnk7XHJcbiAgZGlzcGxheU1vZGU6IHN0cmluZztcclxuICBjdXJyZW50UGFnZVNpemU6IGFueTtcclxuICBjdXJyZW50RmlsdGVyOiBhbnk7XHJcbiAgaGVhZGVyRmlsdGVyRGF0YTogYW55O1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHB1YmxpYyBhdXRoOiBBdXRoU2VydmljZSwgcHJpdmF0ZSBsb2NhbHN0b3JhZ2U6IExvY2FsU2VydmljZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0aWF0aW5nIHRoZSBncmlkIGxpc3RcclxuICAgICAqL1xyXG4gICAgdGhpcy5sb2FkR1dpdGhQYXJhbSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZmV0Y2hpbmcgbG9naW4gZGV0YWlscyBmcm9tIGxvY2FsIHN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgdGhpcy51c2VyID0gdGhpcy5sb2NhbHN0b3JhZ2UuZ2V0T2JqKCd1c2VyJyk7XHJcbiAgICB0aGlzLmRpc3BsYXlNb2RlID0gJ2NvbXBhY3QnO1xyXG4gICAgdGhpcy5jdXJyZW50RmlsdGVyID0gJ2F1dG8nO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnJVcmwgPSB0aGlzLnJvdXRlci51cmwuc3BsaXQoJy8nKTtcclxuICAgIHRoaXMudGVtcENvbHVtbnMgPSB0aGlzLmNvbHVtbnM7XHJcbiAgICBpZiAodGhpcy5jb2x1bW5zICYmIHRoaXMuY29sdW1ucy5ncmlkQ29uZmlnRm9ybUFycmF5KSB7XHJcbiAgICAgIHRoaXMuY29sdW1uSGVhZGVyID0gdGhpcy5jb2x1bW5zLmdyaWRDb25maWdGb3JtQXJyYXkubWFwKGNvbHVtbiA9PiBjb2x1bW4uaGVhZGVyKTtcclxuICAgICAgdGhpcy5jb2x1bW5zID0gdGhpcy5jb2x1bW5zLmdyaWRDb25maWdGb3JtQXJyYXk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbHVtbkhlYWRlciA9IHRoaXMuY29sdW1ucy5tYXAoY29sdW1uID0+IGNvbHVtbi5oZWFkZXIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wb3B1cFBvc2l0aW9uID0geyBvZjogd2luZG93LCBhdDogJ3RvcCcsIG15OiAndG9wJywgb2Zmc2V0OiB7IHk6IDEwIH0gfTtcclxuICAgIHRoaXMuZmlsdGVyVmFsdWUgPSBbXTtcclxuICAgIHRoaXMuY3VzdG9tT3BlcmF0aW9ucyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmUtcmVuZGVyIHRoZSBncmlkIHdoZW4gaW5wdXQgZGF0YSBpcyBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgdGhpcy5sb2FkR1dpdGhQYXJhbSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyaW5nIGRhdGEgZ3JpZCBjb25kaXRpb24gd2lzZSB0aGF0IGxvZ2luIHVzZXIgaXMgYWRtaW4gb3Igbm90XHJcbiAgICovXHJcbiAgbG9hZEdXaXRoUGFyYW0oKSB7XHJcbiAgICBpZiAoIXRoaXMuYXV0aC5pc0FkbWluKCkpIHtcclxuICAgICAgdGhpcy5sb2FkR3JpZCh7IHZhbHVlOiAhdGhpcy5Pcmdhbml6YXRpb24gPyB0aGlzLmF1dGguZ2V0T3JnSUQoKSA6IHRoaXMuT3JnYW5pemF0aW9uIH0sIGZhbHNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMubG9hZEdyaWQoeyB2YWx1ZTogdGhpcy5Pcmdhbml6YXRpb24gPyB0aGlzLk9yZ2FuaXphdGlvbiA6ICdTZWxlY3QtQUxMJyB9LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAvKipcclxuICAgICAqIERhdGFncmlkIGV2ZW4gbGlzdGVuZXIgd2UgY2FuIGN1c3RvbWl6ZSBjb2x1bW4gZXZlbnRcclxuICAgICAqL1xyXG4gICAgdGhpcy5kYXRhR3JpZC5vblJvd0NsaWNrLnN1YnNjcmliZShyb3cgPT4ge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkUm93c0RhdGEuZW1pdChyb3cpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmRhdGFHcmlkLm9uT3B0aW9uQ2hhbmdlZC5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgIGlmIChlLm5hbWUgPT09ICdjb2x1bW5zJyAmJiBlLmZ1bGxOYW1lLmVuZHNXaXRoKCdmaWx0ZXJWYWx1ZXMnKSkge1xyXG4gICAgICAgIGNvbnN0IGNvbEluZGV4ID0gTnVtYmVyKFxyXG4gICAgICAgICAgZS5mdWxsTmFtZVxyXG4gICAgICAgICAgICAubWF0Y2goL1xcW1xcZCtcXF0vKVswXVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnWycsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnXScsICcnKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZS5jb21wb25lbnQuY29sdW1uT3B0aW9uKGNvbEluZGV4LCAnZmlsdGVyVmFsdWVzJyk7XHJcbiAgICAgICAgdGhpcy5tdWx0aXBsZUZpbHRlclZhbHVlcy5lbWl0KGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTZWFyY2hcclxuICAgICAgaWYgKGUubmFtZSA9PT0gJ2NvbHVtbnMnICYmIGUuZnVsbE5hbWUuZW5kc1dpdGgoJ2ZpbHRlclZhbHVlJykpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB0aGlzLmZpbHRlclNlYXJjaFZhbHVlLmVtaXQoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGZpbHRlciBCdWlsZGVyIFBvcHVwXHJcblxyXG4gICAgICBpZiAoZS5uYW1lID09PSAnZmlsdGVyQnVpbGRlclBvcHVwJykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWx0ZXJCdWlsZGVyUG9wdXAnKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB0aGlzLmZpbHRlckJ1aWxkZXJQb3B1cC5lbWl0KGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBmaWx0ZXIgUGFuZWwgLSBlbmFibGUgb3IgZGlzYWJsZVxyXG4gICAgICBpZiAoZS5uYW1lID09PSAnZmlsdGVyUGFuZWwnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZS52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbC5lbWl0KGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTb3J0aW5nXHJcbiAgICAgIGlmIChlLm5hbWUgPT09ICdjb2x1bW5zJyAmJiBlLmZ1bGxOYW1lLmVuZHNXaXRoKCdzb3J0T3JkZXInKSkge1xyXG4gICAgICAgIHRoaXMuc29ydE9yZGVyLmVtaXQoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFBhZ2luZ1xyXG4gICAgICBpZiAoZS5uYW1lID09PSAncGFnaW5nJykge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UuZW1pdChlLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBwYWdlSW5kZXhcclxuICAgICAgaWYgKGUuZnVsbE5hbWUgPT09ICdwYWdpbmcucGFnZUluZGV4Jykge1xyXG4gICAgICAgIHRoaXMucGFnZUluZGV4LmVtaXQoZS52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gcGFnZVNpemVcclxuICAgICAgaWYgKGUuZnVsbE5hbWUgPT09ICdwYWdpbmcucGFnZVNpemUnKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2l6ZS5lbWl0KGUudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRpbmcgZGF0YSBncmlkIGFuZCByZXN0cnVjdHVyaW5nIGRhdGEgZm9yIERldmVsb3BlciBncmlkXHJcbiAgICogQHBhcmFtIG9yZ0lEIG9yaWdpbmF0aW9uIGRldGFpbHNcclxuICAgKiBAcGFyYW0gbG9hZCBvcHRpb25hbCBib29sZWFuIGlzIGZvciBjaGVja2luZyBkYXRhIHNob3VsZCBsb2FkIG9yZ2FuaXphdGlvbiByZXNwZWN0aXZlIG9yIGFsbFxyXG4gICAqL1xyXG4gIGxvYWRHcmlkKG9yZ0lELCBsb2FkID0gdHJ1ZSkge1xyXG4gICAgdGhpcy5Pcmdhbml6YXRpb24gPSBvcmdJRC52YWx1ZTtcclxuICAgIGlmIChsb2FkKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UuZW1pdChvcmdJRC52YWx1ZSA9PT0gJ1NlbGVjdC1BTEwnID8gJ2FsbCcgOiBvcmdJRC52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZGF0YUxpc3Q/Lmxlbmd0aCAmJiB0aGlzLnJVcmwgJiYgdGhpcy5yVXJsWzJdID09PSAndmlldy1kYXNoYm9hcmQnKSB7XHJcbiAgICAgIHRoaXMuZFVybCA9ICd2aWV3LWRhc2hib2FyZC9kYXNoYm9hcmQnO1xyXG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKGBwYWdlcy8ke3RoaXMuZFVybH0vJHt0aGlzLmRhdGFMaXN0WzBdWydpZCddfWApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXN0b21TdG9yZSA9IG5ldyBDdXN0b21TdG9yZSh7XHJcbiAgICAgIGxvYWQ6IF9vcHRzID0+IHtcclxuICAgICAgICB0aGlzLm11bHRpcGxlRmlsdGVyVmFsdWVUb0FQSS5lbWl0KF9vcHRzLmZpbHRlcik7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmRhdGFMaXN0KTtcclxuICAgICAgfSxcclxuICAgICAgdG90YWxDb3VudDogX29wdHMgPT4ge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy50b3RhbENvdW50KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRSb3V0ZXIoZGF0YSkge1xyXG4gICAgdGhpcy5yb3V0ZVRvLmVtaXQoZGF0YSk7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVRvKGRhdGEpIHtcclxuICAgIHRoaXMubmF2aWdhdGUuZW1pdChkYXRhKTtcclxuICB9XHJcblxyXG4gIHBvcHVwKGRhdGEpIHtcclxuICAgIHRoaXMub3BlblBvcHVwLmVtaXQoZGF0YSk7XHJcbiAgfVxyXG5cclxuICBkb3dubG9hZERhdGEoZXZ0KSB7XHJcbiAgICB0aGlzLmRvd25sb2FkVGFibGVSb3cuZW1pdChldnQpO1xyXG4gIH1cclxuXHJcbiAgZWRpdERhdGEoZXZ0KSB7XHJcbiAgICB0aGlzLmVkaXRUYWJsZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG4gIGVkaXREYXRhTXlBcHBsY2lhdGlvbihldnQpIHtcclxuICAgIHRoaXMuZWRpdFRhYmxlUm93LmVtaXQoZXZ0KTtcclxuICB9XHJcbiAgZWRpdEFwcGVhbChldnQpIHtcclxuICAgIHRoaXMuZWRpdFRhYmxlUm93LmVtaXQoZXZ0KTtcclxuICB9XHJcbiAgb25TZWxlY3Rpb25DaGFuZ2VkKGV2dCkge1xyXG4gICAgdGhpcy5yb3dTZWxlY3Rpb24uZW1pdChldnQpO1xyXG4gIH1cclxuXHJcbiAgdmlld0RhdGEoZXZ0KSB7XHJcbiAgICB0aGlzLnZpZXdUYWJsZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVEYXRhKGV2dCkge1xyXG4gICAgdGhpcy5kZWxldGVUYWJsZVJvdy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBkdXBsaWNhdGVEYXRlKGV2dCkge1xyXG4gICAgdGhpcy5kdXBsaWNhdGVSb3cuZW1pdChldnQpO1xyXG4gIH1cclxuXHJcbiAgb3BlbkxpbmsoZXZ0KSB7XHJcbiAgICB0aGlzLm9wZW5FeHRlcm5hbExpbmsuZW1pdChldnQpO1xyXG4gIH1cclxuXHJcbiAgb3BlblBvcHVwTGluayhldnQpIHtcclxuICAgIHRoaXMub3BlbnBvcHVwTGluay5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBhY3RpdmVVc2VyKGV2dCkge1xyXG4gICAgdGhpcy50b2dnbGVSb3cuZW1pdChldnQpO1xyXG4gIH1cclxuICBnZXRWaXNhYmlsaXR5QnlDaG9vc2FibGVQcm9wKGNob29zZXIsIHZpc2libGUpIHtcclxuICAgIGlmIChjaG9vc2VyKSB7XHJcbiAgICAgIHJldHVybiB2aXNpYmxlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRTb3J0T3JkZXIoZGVmYXVsdFNvcnRDb2x1bW4sIGRlZmF1bHRTb3J0VHlwZSwgY29sdW1uRGVmKSB7XHJcbiAgICBpZiAoZGVmYXVsdFNvcnRDb2x1bW4gJiYgZGVmYXVsdFNvcnRUeXBlKSB7XHJcbiAgICAgIHJldHVybiBkZWZhdWx0U29ydENvbHVtbiA9PT0gY29sdW1uRGVmID8gZGVmYXVsdFNvcnRUeXBlIDogJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG4gIG91dENvbWVEYXRhKGV2dCkge1xyXG4gICAgdGhpcy5vdXRDb21lVGFibGVSb3cuZW1pdChldnQpO1xyXG4gIH1cclxuXHJcbiAgZG93bmxvYWRGb3JtUmVzcG9uc2VBdHRhY2htZW50cyhldnQpIHtcclxuICAgIHRoaXMuZG93bmxvYWRGb3JtUmVzcG9uc2VGaWxlcy5lbWl0KGV2dCk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVGb3JtUmVzcG9uc2VBdHRhY2htZW50cyhldnQpIHtcclxuICAgIHRoaXMuZGVsZXRlRm9ybVJlc3BvbnNlRmlsZXMuZW1pdChldnQpO1xyXG4gIH1cclxuXHJcbiAgb25Sb3dQcmVwYXJlZChlKSB7XHJcbiAgICBpZiAoZS5yb3dUeXBlID09ICdkYXRhJyAmJiBlLmRhdGEuaXNuZXcpIHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IGUucm93RWxlbWVudDtcclxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpc25ldycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25DZWxsUHJlcGFyZWQoZSkge1xyXG4gICAgaWYgKGUucm93VHlwZSA9PSAnZGF0YScpIHtcclxuICAgICAgaWYgKGUuY29sdW1uLmRhdGFGaWVsZCA9PT0gJ25vdGljZScpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZS5jZWxsRWxlbWVudDtcclxuICAgICAgICBlLmNlbGxFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IGxpdmV0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5jaGVja09uY2VsbHByZXBhcmUoZSwgbGl2ZXRleHQpO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGl2ZXRleHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGUuY29sdW1uLmRhdGFGaWVsZCA9PT0gJ25vdGlmaWNhdGlvbkV2ZW50Q2hhbm5lbHMnKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGUuY2VsbEVsZW1lbnQ7XHJcbiAgICAgICAgZS5jZWxsRWxlbWVudC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBjb25zdCBsaXZldGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGxldCBlbGUgPSAnJztcclxuICAgICAgICBlLmRhdGEubm90aWZpY2F0aW9uRXZlbnRDaGFubmVscy5tYXAodCA9PiB7XHJcbiAgICAgICAgICBpZiAodC50ZW1wbGF0ZW5hbWUpIHtcclxuICAgICAgICAgICAgZWxlICs9IGA8bGFiZWw+JHt0LnRlbXBsYXRlbmFtZX0mbmJzcDsoPGI+JHt0LnRlbXBsYXRlY2hhbm5lbH08L2I+KTwvbGFiZWw+LGA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGl2ZXRleHQuaW5uZXJIVE1MID0gZWxlO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGl2ZXRleHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGUuY29sdW1uLmRhdGFGaWVsZCA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGUuY2VsbEVsZW1lbnQ7XHJcbiAgICAgICAgZS5jZWxsRWxlbWVudC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBjb25zdCBsaXZldGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGxpdmV0ZXh0LmlubmVySFRNTCA9IGA8aW1nICBzcmM9XCIke1xyXG4gICAgICAgICAgZS5kYXRhLmxpbmsgPyBlLmRhdGE/Lmxpbms/LnNwbGl0KCc/JylbMF0gOiAnJ1xyXG4gICAgICAgIH1cInN0eWxlPVwibWF4LXdpZHRoOiA0NXB4OyBjdXJzb3I6IHBvaW50ZXJcIi8+YDtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGxpdmV0ZXh0KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNoZWNrQ2VsbHByZXBhcmUoZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNoZWNrQ2VsbHByZXBhcmUoZSkge1xyXG4gICAgaWYgKGUuY29sdW1uLmRhdGFGaWVsZCA9PT0gJ3N0YXR1cycgJiYgZS5kYXRhWyd0YWJuYW1lJ10gPT09ICdSRUNPUkRTJyAmJiBlLmRhdGFbJ3N0YXR1cyddID09PSAnTk8gTUFUQ0gnKSB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBlLmNlbGxFbGVtZW50O1xyXG4gICAgICBjb25zdCBsaXZldGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgbGl2ZXRleHQuY2xhc3NMaXN0LmFkZCgnbWwtMicpO1xyXG4gICAgICBsaXZldGV4dC5pbm5lckhUTUwgPSBgPGVtIGNsYXNzPVwiZmEgZmEtaW5mby1jaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIiB0aXRsZT1cIiR7ZS5kYXRhPy5leGVjdXRpb25fZXJyb3I/LmVycm9yfVwiID48L2VtPmA7XHJcbiAgICAgIGlmIChlLmRhdGE/LmV4ZWN1dGlvbl9lcnJvcj8uZXJyb3IpIHtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGxpdmV0ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hlY2tPbmNlbGxwcmVwYXJlKGUsIGxpdmV0ZXh0KSB7XHJcbiAgICBpZiAoZS52YWx1ZSAhPT0gJ05vIERhdGEgRm91bmQnKSB7XHJcbiAgICAgIGxpdmV0ZXh0LmlubmVySFRNTCA9IGA8YSBjbGFzcz1cImJ0bi1saW5rIGxvZ2luTGFiZWxcIiBocmVmPVwiJHtlLnZhbHVlfVwiIHRhcmdldD1cIl9ibGFua1wiPkNsaWNrIEhlcmU8YT5gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGl2ZXRleHQuaW5uZXJIVE1MID0gJ05vIERhdGEgRm91bmQnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25FeHBvcnRpbmcoZSkge1xyXG4gICAgY29uc3QgcGFnZU5hbWUgPSB0aGlzLmxvY2Fsc3RvcmFnZS5nZXRPYmooJ0ZJTEUgRVhQT1JUIE5BTUUnKTtcclxuICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XHJcbiAgICBsZXQgZmlsZU5hbWU6IHN0cmluZztcclxuICAgIGlmIChwYWdlTmFtZSkge1xyXG4gICAgICBmaWxlTmFtZSA9IGAke3BhZ2VOYW1lfSBWZXJzaW9ucyAke2N1cnJlbnREYXRlfWA7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwb3J0UGFnZU5hbWUpIHtcclxuICAgICAgZmlsZU5hbWUgPSBgJHt0aGlzLmV4cG9ydFBhZ2VOYW1lfS0ke2N1cnJlbnREYXRlfWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmaWxlTmFtZSA9IGBEeW5hbWljLVBhZ2VzICR7Y3VycmVudERhdGV9YDtcclxuICAgIH1cclxuICAgIGlmIChlLmZvcm1hdCA9PT0gJ3BkZicpIHtcclxuICAgICAgY29uc3QgZG9jID0gbmV3IGpzUERGLmpzUERGKCk7XHJcbiAgICAgIGV4cG9ydERhdGFHcmlkVG9QZGYoe1xyXG4gICAgICAgIGpzUERGRG9jdW1lbnQ6IGRvYyxcclxuICAgICAgICBjb21wb25lbnQ6IGUuY29tcG9uZW50XHJcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGRvYy5zYXZlKGAke2ZpbGVOYW1lfS5wZGZgKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGUuZm9ybWF0ID09PSAneGxzeCcpIHtcclxuICAgICAgZS5maWxlTmFtZSA9IGZpbGVOYW1lO1xyXG4gICAgfSBlbHNlIGlmIChlLmZvcm1hdCA9PT0gJ2NzdicpIHtcclxuICAgICAgY29uc3Qgd29ya2Jvb2sgPSBuZXcgRXhjZWxKUy5Xb3JrYm9vaygpO1xyXG4gICAgICBjb25zdCB3b3Jrc2hlZXQgPSB3b3JrYm9vay5hZGRXb3Jrc2hlZXQoJ01haW4gc2hlZXQnKTtcclxuICAgICAgZXhwb3J0RGF0YUdyaWQoe1xyXG4gICAgICAgIGNvbXBvbmVudDogZS5jb21wb25lbnQsXHJcbiAgICAgICAgd29ya3NoZWV0OiB3b3Jrc2hlZXRcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd29ya2Jvb2suY3N2LndyaXRlQnVmZmVyKCkudGhlbihmdW5jdGlvbiAoYnVmZmVyKSB7XHJcbiAgICAgICAgICBzYXZlQXMobmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfSksIGAke2ZpbGVOYW1lfS5jc3ZgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBlLmNhbmNlbCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnRlbnRSZWFkeSA9IGUgPT4ge1xyXG4gICAgY29uc3QgcmVvcmRlckNvbHVtbnMgPSBlLmNvbXBvbmVudC5pbnN0YW5jZSgpLmdldFZpc2libGVDb2x1bW5zKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZW9yZGVyQ29sdW1ucywgJ3Jlb3JkZXJDb2x1bW5zJyk7XHJcbiAgfTtcclxuICBjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhKG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMuZGF0YVNvdXJjZS5wb3N0UHJvY2VzcyA9IHJlc3VsdHMgPT4ge1xyXG4gICAgICByZXN1bHRzLm1hcCh4ID0+IHtcclxuICAgICAgICB4LnRleHQgPSB4W29wdGlvbnMuZGF0YVNvdXJjZS5ncm91cFswXS5zZWxlY3Rvcl07XHJcbiAgICAgICAgeC52YWx1ZSA9IFtvcHRpb25zLmRhdGFTb3VyY2UuZ3JvdXBbMF0uc2VsZWN0b3IsICc9JywgeFtvcHRpb25zLmRhdGFTb3VyY2UuZ3JvdXBbMF0uc2VsZWN0b3JdXTtcclxuICAgICAgICByZXR1cm4geDtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdHMsICd1cGRhdGUgY3VzdG9taXplSGVhZGVyRmlsdGVyRGF0YScpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsIjxkeC1kYXRhLWdyaWRcclxuICBpZD1cImdyaWRDb250YWluZXJcIlxyXG4gIFtkYXRhU291cmNlXT1cImN1c3RvbVN0b3JlXCJcclxuICBbYWxsb3dDb2x1bW5SZW9yZGVyaW5nXT1cInRydWVcIlxyXG4gIFthbGxvd0NvbHVtblJlc2l6aW5nXT1cInRydWVcIlxyXG4gIFtjb2x1bW5BdXRvV2lkdGhdPVwidHJ1ZVwiXHJcbiAgW3Nob3dCb3JkZXJzXT1cInRydWVcIlxyXG4gIFtyb3dBbHRlcm5hdGlvbkVuYWJsZWRdPVwidXBkYXRlR3JpZD8ucm93U2VsZWN0aW9uID8gZmFsc2UgOiB0cnVlXCJcclxuICBbc2hvd0NvbHVtbkxpbmVzXT1cInRydWVcIlxyXG4gIFtzaG93Um93TGluZXNdPVwidHJ1ZVwiXHJcbiAgW2ZpbHRlclZhbHVlXT1cImZpbHRlclZhbHVlXCJcclxuICBbcmVtb3RlT3BlcmF0aW9uc109XCJyZW1vdGVPcGVyYXRpb25zID8gcmVtb3RlT3BlcmF0aW9ucyA6IGZhbHNlXCJcclxuICBbaG92ZXJTdGF0ZUVuYWJsZWRdPVwidXBkYXRlR3JpZD8ucm93U2VsZWN0aW9uXCJcclxuICAob25TZWxlY3Rpb25DaGFuZ2VkKT1cIm9uU2VsZWN0aW9uQ2hhbmdlZCgkZXZlbnQpXCJcclxuICAob25Sb3dQcmVwYXJlZCk9XCJvblJvd1ByZXBhcmVkKCRldmVudClcIlxyXG4gIChvbkNlbGxQcmVwYXJlZCk9XCJvbkNlbGxQcmVwYXJlZCgkZXZlbnQpXCJcclxuICAob25Db250ZW50UmVhZHkpPVwiY29udGVudFJlYWR5KCRldmVudClcIlxyXG4gIChvbkV4cG9ydGluZyk9XCJvbkV4cG9ydGluZygkZXZlbnQpXCI+XHJcbiAgPGR4by1sb2FkLXBhbmVsIFtlbmFibGVkXT1cImZhbHNlXCI+PC9keG8tbG9hZC1wYW5lbD5cclxuICA8ZHhvLWZpbHRlci1wYW5lbCBbdmlzaWJsZV09XCJmYWxzZVwiPjwvZHhvLWZpbHRlci1wYW5lbD5cclxuICA8ZHhvLXBhZ2luZyBbcGFnZVNpemVdPVwiY3VycmVudFBhZ2VTaXplXCI+PC9keG8tcGFnaW5nPlxyXG4gIDxkeG8tcGFnZXJcclxuICAgIFt2aXNpYmxlXT1cInRydWVcIlxyXG4gICAgW2FsbG93ZWRQYWdlU2l6ZXNdPVwiWzEwLCAyNSwgNTAsIDEwMF1cIlxyXG4gICAgW2Rpc3BsYXlNb2RlXT1cImRpc3BsYXlNb2RlXCJcclxuICAgIFtzaG93UGFnZVNpemVTZWxlY3Rvcl09XCJ0cnVlXCJcclxuICAgIFtzaG93SW5mb109XCJ0cnVlXCJcclxuICAgIFtzaG93TmF2aWdhdGlvbkJ1dHRvbnNdPVwidHJ1ZVwiPjwvZHhvLXBhZ2VyPlxyXG4gIDwhLS1lbmQgcGFnaW5hdGlvbi0tPlxyXG5cclxuICA8ZHhvLWV4cG9ydCBbZW5hYmxlZF09XCJlbmFibGVFeHBvcnRcIiBbZm9ybWF0c109XCJbJ3hsc3gnLCAnY3N2J11cIj48L2R4by1leHBvcnQ+XHJcblxyXG4gIDxkeG8tZmlsdGVyLWJ1aWxkZXIgW2N1c3RvbU9wZXJhdGlvbnNdPVwiY3VzdG9tT3BlcmF0aW9uc1wiPiA8L2R4by1maWx0ZXItYnVpbGRlcj5cclxuICA8ZHhvLWZpbHRlci1idWlsZGVyLXBvcHVwIFtwb3NpdGlvbl09XCJwb3B1cFBvc2l0aW9uXCI+IDwvZHhvLWZpbHRlci1idWlsZGVyLXBvcHVwPlxyXG5cclxuICA8ZHhvLWZpbHRlci1yb3cgW3Zpc2libGVdPVwic2hvd0hlYWRlckZpbHRlclwiIFthcHBseUZpbHRlcl09XCJjdXJyZW50RmlsdGVyXCI+PC9keG8tZmlsdGVyLXJvdz5cclxuICA8ZHhvLWhlYWRlci1maWx0ZXIgW3Zpc2libGVdPVwidHJ1ZVwiIFthbGxvd1NlYXJjaF09XCJmYWxzZVwiPjwvZHhvLWhlYWRlci1maWx0ZXI+XHJcbiAgPGR4by1zZWxlY3Rpb24gbW9kZT1cInNpbmdsZVwiICpuZ0lmPVwidXBkYXRlR3JpZD8ucm93U2VsZWN0aW9uXCI+PC9keG8tc2VsZWN0aW9uPlxyXG4gIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGNvbHVtbiBvZiBjb2x1bW5zOyBsZXQgaSA9IGluZGV4XCI+XHJcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uPy5oaWRlICE9PSB0cnVlXCI+XHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4/Lmxpbms7IGVsc2Ugbm9MaW5rXCI+XHJcbiAgICAgICAgPGR4aS1jb2x1bW5cclxuICAgICAgICAgIFt2aXNpYmxlXT1cImdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AodXBkYXRlR3JpZD8uY2hvb3NlciwgY29sdW1uPy52aXNpYmxlKVwiXHJcbiAgICAgICAgICBbYWxsb3dIaWRpbmddPVwiIWNvbHVtbj8uQ2hvb3NhYmxlXCJcclxuICAgICAgICAgIFtmaXhlZF09XCJjb2x1bW4/LmZpeGVkXCJcclxuICAgICAgICAgIFtkYXRhRmllbGRdPVwiY29sdW1uPy5jb2x1bW5EZWZcIlxyXG4gICAgICAgICAgW2ZpbHRlck9wZXJhdGlvbnNdPVwiY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zID8gY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zIDogJydcIlxyXG4gICAgICAgICAgW2NhcHRpb25dPVwiY29sdW1uPy5oZWFkZXJcIlxyXG4gICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbj8uZmlsdGVyXCJcclxuICAgICAgICAgIGNlbGxUZW1wbGF0ZT1cImNlbGxUZW1wbGF0ZVwiXHJcbiAgICAgICAgICBbYWxsb3dTb3J0aW5nXT1cImNvbHVtbj8uc29ydFwiXHJcbiAgICAgICAgICBbc29ydE9yZGVyXT1cImdldFNvcnRPcmRlcih1cGRhdGVHcmlkPy5kZWZhdWx0U29ydENvbHVtbiwgdXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRUeXBlLCBjb2x1bW4/LmNvbHVtbkRlZilcIj5cclxuICAgICAgICAgIDxkeG8taGVhZGVyLWZpbHRlciBbZGF0YVNvdXJjZV09XCJjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICAgICAgICA8L2R4aS1jb2x1bW4+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICA8bmctdGVtcGxhdGUgI25vTGluaz5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uPy5pY29uOyBlbHNlIG5vSWNvblwiPlxyXG4gICAgICAgICAgPGR4aS1jb2x1bW5cclxuICAgICAgICAgICAgW3Zpc2libGVdPVwiZ2V0VmlzYWJpbGl0eUJ5Q2hvb3NhYmxlUHJvcCh1cGRhdGVHcmlkPy5jaG9vc2VyLCBjb2x1bW4/LnZpc2libGUpXCJcclxuICAgICAgICAgICAgW2FsbG93SGlkaW5nXT1cIiFjb2x1bW4/LkNob29zYWJsZVwiXHJcbiAgICAgICAgICAgIFtmaXhlZF09XCJjb2x1bW4/LmZpeGVkXCJcclxuICAgICAgICAgICAgW2RhdGFGaWVsZF09XCJjb2x1bW4/LmNvbHVtbkRlZlwiXHJcbiAgICAgICAgICAgIFtjYXB0aW9uXT1cImNvbHVtbj8uaGVhZGVyXCJcclxuICAgICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbj8uZmlsdGVyXCJcclxuICAgICAgICAgICAgW2ZpbHRlck9wZXJhdGlvbnNdPVwiY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zID8gY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zIDogJydcIlxyXG4gICAgICAgICAgICBjZWxsVGVtcGxhdGU9XCJpY29uVGVtcGxhdGVcIlxyXG4gICAgICAgICAgICBbYWxsb3dTb3J0aW5nXT1cImNvbHVtbj8uc29ydFwiXHJcbiAgICAgICAgICAgIFtzb3J0T3JkZXJdPVwiZ2V0U29ydE9yZGVyKHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0Q29sdW1uLCB1cGRhdGVHcmlkPy5kZWZhdWx0U29ydFR5cGUsIGNvbHVtbj8uY29sdW1uRGVmKVwiPlxyXG4gICAgICAgICAgICA8ZHhvLWhlYWRlci1maWx0ZXIgW2RhdGFTb3VyY2VdPVwiY3VzdG9taXplSGVhZGVyRmlsdGVyRGF0YVwiPjwvZHhvLWhlYWRlci1maWx0ZXI+XHJcbiAgICAgICAgICA8L2R4aS1jb2x1bW4+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgIDxuZy10ZW1wbGF0ZSAjbm9JY29uPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4/LmRhdGVGb3JtYXQ7IGVsc2Ugbm9EYXRlXCI+XHJcbiAgICAgICAgICA8ZHhpLWNvbHVtblxyXG4gICAgICAgICAgICBbdmlzaWJsZV09XCJnZXRWaXNhYmlsaXR5QnlDaG9vc2FibGVQcm9wKHVwZGF0ZUdyaWQ/LmNob29zZXIsIGNvbHVtbj8udmlzaWJsZSlcIlxyXG4gICAgICAgICAgICBbYWxsb3dIaWRpbmddPVwiIWNvbHVtbj8uQ2hvb3NhYmxlXCJcclxuICAgICAgICAgICAgW2ZpeGVkXT1cImNvbHVtbj8uZml4ZWRcIlxyXG4gICAgICAgICAgICAqbmdJZj1cImNvbHVtbj8uZGF0ZXRleHQgPT09ICdNTUREMjQnXCJcclxuICAgICAgICAgICAgW2RhdGFGaWVsZF09XCJjb2x1bW4/LmNvbHVtbkRlZlwiXHJcbiAgICAgICAgICAgIFtjYXB0aW9uXT1cImNvbHVtbj8uaGVhZGVyXCJcclxuICAgICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbj8uZmlsdGVyXCJcclxuICAgICAgICAgICAgW2ZpbHRlck9wZXJhdGlvbnNdPVwiY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zID8gY29sdW1uPy5maWx0ZXJPcGVyYXRpb25zIDogJydcIlxyXG4gICAgICAgICAgICBkYXRhVHlwZT1cImRhdGVcIlxyXG4gICAgICAgICAgICBmb3JtYXQ9XCJNTS9kZC95eXl5LCBISDptbVwiXHJcbiAgICAgICAgICAgIFthbGxvd1NvcnRpbmddPVwiY29sdW1uPy5zb3J0XCJcclxuICAgICAgICAgICAgW3NvcnRPcmRlcl09XCJnZXRTb3J0T3JkZXIodXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRDb2x1bW4sIHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0VHlwZSwgY29sdW1uPy5jb2x1bW5EZWYpXCI+XHJcbiAgICAgICAgICAgIDxkeG8taGVhZGVyLWZpbHRlciBbZGF0YVNvdXJjZV09XCJjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICAgICAgICAgIDwvZHhpLWNvbHVtbj5cclxuICAgICAgICAgIDxkeGktY29sdW1uXHJcbiAgICAgICAgICAgIFt2aXNpYmxlXT1cImdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AodXBkYXRlR3JpZD8uY2hvb3NlciwgY29sdW1uPy52aXNpYmxlKVwiXHJcbiAgICAgICAgICAgIFthbGxvd0hpZGluZ109XCIhY29sdW1uPy5DaG9vc2FibGVcIlxyXG4gICAgICAgICAgICBbZml4ZWRdPVwiY29sdW1uPy5maXhlZFwiXHJcbiAgICAgICAgICAgICpuZ0lmPVwiY29sdW1uPy5kYXRldGV4dCA9PT0gJ01EWSdcIlxyXG4gICAgICAgICAgICBbZmlsdGVyT3BlcmF0aW9uc109XCJjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgPyBjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgOiAnJ1wiXHJcbiAgICAgICAgICAgIFtkYXRhRmllbGRdPVwiY29sdW1uPy5jb2x1bW5EZWZcIlxyXG4gICAgICAgICAgICBbY2FwdGlvbl09XCJjb2x1bW4/LmhlYWRlclwiXHJcbiAgICAgICAgICAgIFthbGxvd0ZpbHRlcmluZ109XCJjb2x1bW4/LmZpbHRlclwiXHJcbiAgICAgICAgICAgIGRhdGFUeXBlPVwiZGF0ZVwiXHJcbiAgICAgICAgICAgIGZvcm1hdD1cIk1NL2RkL3l5eXlcIlxyXG4gICAgICAgICAgICBbYWxsb3dTb3J0aW5nXT1cImNvbHVtbj8uc29ydFwiXHJcbiAgICAgICAgICAgIFtzb3J0T3JkZXJdPVwiZ2V0U29ydE9yZGVyKHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0Q29sdW1uLCB1cGRhdGVHcmlkPy5kZWZhdWx0U29ydFR5cGUsIGNvbHVtbj8uY29sdW1uRGVmKVwiPlxyXG4gICAgICAgICAgICA8ZHhvLWhlYWRlci1maWx0ZXIgW2RhdGFTb3VyY2VdPVwiY3VzdG9taXplSGVhZGVyRmlsdGVyRGF0YVwiPjwvZHhvLWhlYWRlci1maWx0ZXI+XHJcbiAgICAgICAgICA8L2R4aS1jb2x1bW4+XHJcbiAgICAgICAgICA8ZHhpLWNvbHVtblxyXG4gICAgICAgICAgICBbdmlzaWJsZV09XCJnZXRWaXNhYmlsaXR5QnlDaG9vc2FibGVQcm9wKHVwZGF0ZUdyaWQ/LmNob29zZXIsIGNvbHVtbj8udmlzaWJsZSlcIlxyXG4gICAgICAgICAgICBbYWxsb3dIaWRpbmddPVwiIWNvbHVtbj8uQ2hvb3NhYmxlXCJcclxuICAgICAgICAgICAgW2ZpeGVkXT1cImNvbHVtbj8uZml4ZWRcIlxyXG4gICAgICAgICAgICAqbmdJZj1cImNvbHVtbj8uZGF0ZXRleHQgIT09ICdNRFknICYmIGNvbHVtbj8uZGF0ZXRleHQgIT09ICdNTUREMjQnXCJcclxuICAgICAgICAgICAgW2RhdGFGaWVsZF09XCJjb2x1bW4/LmNvbHVtbkRlZlwiXHJcbiAgICAgICAgICAgIFtmaWx0ZXJPcGVyYXRpb25zXT1cImNvbHVtbj8uZmlsdGVyT3BlcmF0aW9ucyA/IGNvbHVtbj8uZmlsdGVyT3BlcmF0aW9ucyA6ICcnXCJcclxuICAgICAgICAgICAgW2NhcHRpb25dPVwiY29sdW1uPy5oZWFkZXJcIlxyXG4gICAgICAgICAgICBbYWxsb3dGaWx0ZXJpbmddPVwiY29sdW1uPy5maWx0ZXJcIlxyXG4gICAgICAgICAgICBkYXRhVHlwZT1cImRhdGVcIlxyXG4gICAgICAgICAgICBbZm9ybWF0XT1cImNvbHVtbj8ucmVtb3ZlVGltZSA/ICdNTS9kZC95eXl5JyA6ICdNTS9kZC95eXl5LCBoaDptbSBhJ1wiXHJcbiAgICAgICAgICAgIFthbGxvd1NvcnRpbmddPVwiY29sdW1uPy5zb3J0XCJcclxuICAgICAgICAgICAgW3NvcnRPcmRlcl09XCJnZXRTb3J0T3JkZXIodXBkYXRlR3JpZD8uZGVmYXVsdFNvcnRDb2x1bW4sIHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0VHlwZSwgY29sdW1uPy5jb2x1bW5EZWYpXCI+XHJcbiAgICAgICAgICAgIDxkeG8taGVhZGVyLWZpbHRlciBbZGF0YVNvdXJjZV09XCJjdXN0b21pemVIZWFkZXJGaWx0ZXJEYXRhXCI+PC9keG8taGVhZGVyLWZpbHRlcj5cclxuICAgICAgICAgIDwvZHhpLWNvbHVtbj5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgPG5nLXRlbXBsYXRlICNub0RhdGU+XHJcbiAgICAgICAgPGR4aS1jb2x1bW5cclxuICAgICAgICAgIFtkYXRhRmllbGRdPVwiY29sdW1uLmNvbHVtbkRlZlwiXHJcbiAgICAgICAgICBbY2FwdGlvbl09XCJjb2x1bW4uaGVhZGVyXCJcclxuICAgICAgICAgIFtmaWx0ZXJPcGVyYXRpb25zXT1cImNvbHVtbj8uZmlsdGVyT3BlcmF0aW9ucyA/IGNvbHVtbj8uZmlsdGVyT3BlcmF0aW9ucyA6ICcnXCJcclxuICAgICAgICAgIFthbGxvd0ZpbHRlcmluZ109XCJjb2x1bW4uZmlsdGVyXCI+XHJcbiAgICAgICAgICA8ZHhvLWhlYWRlci1maWx0ZXIgW2RhdGFTb3VyY2VdPVwiY3VzdG9taXplSGVhZGVyRmlsdGVyRGF0YVwiPjwvZHhvLWhlYWRlci1maWx0ZXI+XHJcbiAgICAgICAgPC9keGktY29sdW1uPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4/LmhlYWRlci50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gJ3N0YXR1cydcIj5cclxuICAgICAgICAgIDxkeGktY29sdW1uXHJcbiAgICAgICAgICAgIFt2aXNpYmxlXT1cImdldFZpc2FiaWxpdHlCeUNob29zYWJsZVByb3AodXBkYXRlR3JpZD8uY2hvb3NlciwgY29sdW1uPy52aXNpYmxlKVwiXHJcbiAgICAgICAgICAgIFthbGxvd0hpZGluZ109XCIhY29sdW1uPy5DaG9vc2FibGVcIlxyXG4gICAgICAgICAgICBbZml4ZWRdPVwiY29sdW1uPy5maXhlZFwiXHJcbiAgICAgICAgICAgIFtkYXRhRmllbGRdPVwiY29sdW1uPy5jb2x1bW5EZWZcIlxyXG4gICAgICAgICAgICBbZmlsdGVyT3BlcmF0aW9uc109XCJjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgPyBjb2x1bW4/LmZpbHRlck9wZXJhdGlvbnMgOiAnJ1wiXHJcbiAgICAgICAgICAgIFtjYXB0aW9uXT1cImNvbHVtbj8uaGVhZGVyXCJcclxuICAgICAgICAgICAgW2FsbG93RmlsdGVyaW5nXT1cImNvbHVtbj8uZmlsdGVyXCJcclxuICAgICAgICAgICAgY2VsbFRlbXBsYXRlPVwic3RhdHVzVGVtcGxhdGVcIlxyXG4gICAgICAgICAgICBbYWxsb3dTb3J0aW5nXT1cImNvbHVtbj8uc29ydFwiXHJcbiAgICAgICAgICAgIFtzb3J0T3JkZXJdPVwiZ2V0U29ydE9yZGVyKHVwZGF0ZUdyaWQ/LmRlZmF1bHRTb3J0Q29sdW1uLCB1cGRhdGVHcmlkPy5kZWZhdWx0U29ydFR5cGUsIGNvbHVtbj8uY29sdW1uRGVmKVwiPlxyXG4gICAgICAgICAgICA8ZHhvLWhlYWRlci1maWx0ZXIgW2RhdGFTb3VyY2VdPVwiY3VzdG9taXplSGVhZGVyRmlsdGVyRGF0YVwiPjwvZHhvLWhlYWRlci1maWx0ZXI+XHJcbiAgICAgICAgICA8L2R4aS1jb2x1bW4+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICA8L25nLWNvbnRhaW5lcj5cclxuICA8bmctY29udGFpbmVyXHJcbiAgICAqbmdJZj1cIlxyXG4gICAgICB1cGRhdGVHcmlkICYmXHJcbiAgICAgICh1cGRhdGVHcmlkPy5leHRlcm5hbExpbmsgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5vcGVuUG9wdXAgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5lZGl0IHx8XHJcbiAgICAgICAgdXBkYXRlR3JpZD8uZWRpdE15QXBwbGljYXRpb24gfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5lZGl0QXBwZWFsIHx8XHJcbiAgICAgICAgdXBkYXRlR3JpZD8uZWRpdEJpbGxpbmcgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5kZWxldGUgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5kZWxldGUgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5kb3dubG9hZCB8fFxyXG4gICAgICAgIHVwZGF0ZUdyaWQ/LnNob3dEb3dubG9hZCB8fFxyXG4gICAgICAgIHVwZGF0ZUdyaWQ/LnNob3dEZWxldGUgfHxcclxuICAgICAgICB1cGRhdGVHcmlkPy5wZGYpXHJcbiAgICBcIj5cclxuICAgIDxkeGktY29sdW1uXHJcbiAgICAgIFt3aWR0aF09XCIxMDBcIlxyXG4gICAgICBbYWxsb3dGaWx0ZXJpbmddPVwiZmFsc2VcIlxyXG4gICAgICBbYWxsb3dTb3J0aW5nXT1cImZhbHNlXCJcclxuICAgICAgY2FwdGlvbj1cIkFjdGlvblwiXHJcbiAgICAgIGNlbGxUZW1wbGF0ZT1cImVkaXRDZWxsVGVtcGxhdGVcIj48L2R4aS1jb2x1bW4+XHJcbiAgICA8IS0tIEFjdGlvbiBsYWJlbCBhZGRlZCBmb3IgYWRtaW4gZ3JpZCAtLT5cclxuXHJcbiAgICA8ZGl2ICpkeFRlbXBsYXRlPVwibGV0IGQgb2YgJ2VkaXRDZWxsVGVtcGxhdGUnXCI+XHJcbiAgICAgIDxhXHJcbiAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5leHRlcm5hbExpbmtcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJPcGVuXCJcclxuICAgICAgICAoY2xpY2spPVwib3BlbkxpbmsoZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1leHRlcm5hbC1saW5rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiQXBwZWFsXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LmFwcGVhbFwiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZ1wiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkFwcGVhbFwiXHJcbiAgICAgICAgKGNsaWNrKT1cIm5hdmlnYXRlVG8oZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1leHRlcm5hbC1saW5rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uc2hvd0Rvd25sb2FkICYmICF1cGRhdGVHcmlkPy5pc05ld2x5VXBsb2FkZWRcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJEb3dubG9hZCBGaWxlXCJcclxuICAgICAgICAoY2xpY2spPVwiZG93bmxvYWRGb3JtUmVzcG9uc2VBdHRhY2htZW50cyhkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT4gPC9hXHJcbiAgICAgID4mbmJzcDsmbmJzcDtcclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LnNob3dEZWxldGVcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgdGV4dC1kYW5nZXJcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJEZWxldGUgRmlsZVwiXHJcbiAgICAgICAgKGNsaWNrKT1cImRlbGV0ZUZvcm1SZXNwb25zZUF0dGFjaG1lbnRzKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtdHJhc2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2VtPlxyXG4gICAgICA8L2E+XHJcbiAgICAgIDxhXHJcbiAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5vcGVuUG9wdXBcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJPcGVuXCJcclxuICAgICAgICAoY2xpY2spPVwib3BlblBvcHVwTGluayhkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLW5ld3NwYXBlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uZHVwbGljYXRlXCJcclxuICAgICAgICBjbGFzcz1cIm5vLWJnIG1yLTJcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJDb3B5XCJcclxuICAgICAgICAoY2xpY2spPVwiZHVwbGljYXRlRGF0ZShkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWNvcHlcIiBhcmlhLWhpZGRlbj1cInRydWVcIlxyXG4gICAgICAgICAgPjxzcGFuIGNsYXNzPVwic3Itb25seVwiPkNvcHk8L3NwYW4+PC9lbVxyXG4gICAgICAgID5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uZG93bmxvYWRcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmdcIlxyXG4gICAgICAgIG1hdFRvb2x0aXA9XCJEb3dubG9hZFwiXHJcbiAgICAgICAgKGNsaWNrKT1cImRvd25sb2FkRGF0YShkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiRWRpdFwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5lZGl0ICYmICFkLmRhdGE/LmV4dGVuZGVkUHJvcHM/Lm91dGNvbWVcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgbXItMlwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAgIChjbGljayk9XCJlZGl0RGF0YShkKVwiPlxyXG4gICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLXBlbmNpbFwiIHRpdGxlPVwiRWRpdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHN0eWxlPVwiZm9udC1zaXplOiAxM3B4XCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5lZGl0UmVjb3JkXCJcclxuICAgICAgY2xhc3M9XCJuby1iZyBtci0yXCJcclxuICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAoY2xpY2spPVwiZWRpdERhdGEoZClcIj5cclxuICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtcGVuY2lsXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+RWRpdDwvc3Bhbj48L2VtPlxyXG4gICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHlcIj5WaWV3PC9zcGFuPlxyXG4gICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiRWRpdFwiXHJcbiAgICAgICAgKm5nSWY9XCJ1cGRhdGVHcmlkPy5lZGl0TXlBcHBsaWNhdGlvbiAmJiBkPy5kYXRhPy5hcHBsaWNhdGlvbl9zdGF0dXMgPT09ICdJbiBQcm9ncmVzcydcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgbXItMlwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAgIChjbGljayk9XCJlZGl0RGF0YU15QXBwbGNpYXRpb24oZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1wZW5jaWxcIiB0aXRsZT1cIkVkaXRcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTNweFwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICB0aXRsZT1cIkVkaXRcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8uZWRpdEFwcGVhbCAmJiBkPy5kYXRhPy5zdGF0dXMgPT09ICdJbiBQcm9ncmVzcydcIlxyXG4gICAgICAgIGNsYXNzPVwibm8tYmcgbXItMlwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkVkaXRcIlxyXG4gICAgICAgIChjbGljayk9XCJlZGl0QXBwZWFsKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtcGVuY2lsXCIgdGl0bGU9XCJFZGl0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgc3R5bGU9XCJmb250LXNpemU6IDEzcHhcIj48L2VtPlxyXG4gICAgICA8L2E+XHJcbiAgICAgIDxhXHJcbiAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiXHJcbiAgICAgICAgdGl0bGU9XCJFZGl0XCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LmVkaXRCaWxsaW5nICYmIGQ/LmRhdGE/LnN0YXR1cyA9PT0gJ1dhaXRpbmcgZm9yIGFwcHJvdmFsJ1wiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZyBtci0yXCJcclxuICAgICAgICBtYXRUb29sdGlwPVwiRWRpdFwiXHJcbiAgICAgICAgKGNsaWNrKT1cImVkaXRBcHBlYWwoZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS1wZW5jaWxcIiB0aXRsZT1cIkVkaXRcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTNweFwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICB0aXRsZT1cIlZpZXdcIlxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8udmlld1wiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZyBtci0yXCJcclxuICAgICAgICBtYXRUb29sdGlwPVwiVmlld1wiXHJcbiAgICAgICAgKGNsaWNrKT1cInZpZXdEYXRhKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtZXllXCIgdGl0bGU9XCJWaWV3XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YVxyXG4gICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIlxyXG4gICAgICAgIHRpdGxlPVwiZGVsZXRlXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/LmRlbGV0ZVwiXHJcbiAgICAgICAgY2xhc3M9XCJuby1iZyB0ZXh0LWRhbmdlclwiXHJcbiAgICAgICAgbWF0VG9vbHRpcD1cIkRlbGV0ZVwiXHJcbiAgICAgICAgKGNsaWNrKT1cImRlbGV0ZURhdGEoZClcIj5cclxuICAgICAgICA8ZW0gY2xhc3M9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGFcclxuICAgICAgICBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcclxuICAgICAgICAqbmdJZj1cInVwZGF0ZUdyaWQ/Lm91dGNvbWUgJiYgZC5kYXRhPy5leHRlbmRlZFByb3BzPy5vdXRjb21lXCJcclxuICAgICAgICBjbGFzcz1cIm5vLWJnXCJcclxuICAgICAgICBtYXRUb29sdGlwPVwiVmlld1wiXHJcbiAgICAgICAgKGNsaWNrKT1cIm91dENvbWVEYXRhKGQpXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtZXllXCIgdGl0bGU9XCJWaWV3XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9lbT5cclxuICAgICAgPC9hPlxyXG4gICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgdGl0bGU9XCJwZGZcIiAqbmdJZj1cInVwZGF0ZUdyaWQ/LnBkZlwiIGNsYXNzPVwibm8tYmdcIiBtYXRUb29sdGlwPVwiUERGXCI+XHJcbiAgICAgICAgPGVtIGNsYXNzPVwiZmEgZmEtZmlsZS1wZGYtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvZW0+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgICpuZ0lmPVwidXBkYXRlR3JpZD8udG9nZ2xlXCJcclxuICAgICAgICBjbGFzcz1cIm5vLWJnXCJcclxuICAgICAgICBbbWF0VG9vbHRpcF09XCJkLmRhdGEuaXNhY3RpdmUgPT09IHRydWUgPyAnRGVhY3RpdmF0ZScgOiAnQWN0aXZhdGUnXCJcclxuICAgICAgICAoY2xpY2spPVwiYWN0aXZlVXNlcihkKVwiPlxyXG4gICAgICAgIDxlbSAqbmdJZj1cInVwZGF0ZUdyaWQ/LnRvZ2dsZSAmJiBkLmRhdGEuaXNhY3RpdmUgPT09IHRydWVcIiBjbGFzcz1cImZhIGZhLXRvZ2dsZS1vblwiPjwvZW0+XHJcbiAgICAgICAgPGVtICpuZ0lmPVwidXBkYXRlR3JpZD8udG9nZ2xlICYmIGQuZGF0YS5pc2FjdGl2ZSA9PT0gZmFsc2VcIiBjbGFzcz1cImZhIGZhLXRvZ2dsZS1vZmZcIj48L2VtPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgICAgPGJ1dHRvbiAqbmdJZj1cInVwZGF0ZUdyaWQ/LmFjdGl2ZW9yZGVhY3RpdmVcIiBjbGFzcz1cIm5vLWJnXCIgKGNsaWNrKT1cImRlbGV0ZURhdGEoZClcIj5cclxuICAgICAgICA8ZW0gKm5nSWY9XCJ1cGRhdGVHcmlkPy5hY3RpdmVvcmRlYWN0aXZlICYmIGQuZGF0YS5hY3RpdmVmbGFnID09PSAxXCIgY2xhc3M9XCJmYSBmYS10b2dnbGUtb25cIj48L2VtPlxyXG4gICAgICAgIDxlbSAqbmdJZj1cInVwZGF0ZUdyaWQ/LmFjdGl2ZW9yZGVhY3RpdmUgJiYgZC5kYXRhLmFjdGl2ZWZsYWcgPT09IDBcIiBjbGFzcz1cImZhIGZhLXRvZ2dsZS1vZmZcIj48L2VtPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG4gIDxkaXYgKmR4VGVtcGxhdGU9XCJsZXQgZCBvZiAnY2VsbFRlbXBsYXRlJ1wiPlxyXG4gICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiICpuZ0lmPVwiZC52YWx1ZSAmJiBkLnZhbHVlICE9PSAnbnVsbCdcIiAoY2xpY2spPVwiZ2V0Um91dGVyKGQpXCI+e3tcclxuICAgICAgZC52YWx1ZSAhPT0gJ251bGwnID8gZC52YWx1ZSA6ICcnXHJcbiAgICB9fTwvYT5cclxuICA8L2Rpdj5cclxuICA8ZGl2ICpkeFRlbXBsYXRlPVwibGV0IGQgb2YgJ2ljb25UZW1wbGF0ZSdcIj5cclxuICAgIDxlbSBjbGFzcz1cImZhIGZhLWJvb2tcIiAoY2xpY2spPVwicG9wdXAoZC52YWx1ZSlcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2VtPlxyXG4gIDwvZGl2PlxyXG48L2R4LWRhdGEtZ3JpZD5cclxuPCEtLSA8bmctdGVtcGxhdGUgI2NhbGxOYXJyYXRpdmVQb3B1cD5cclxuICA8aDIgbWF0RGlhbG9nVGl0bGU+TmFycmF0aXZlPC9oMj5cclxuICA8ZGl2IFtpbm5lckhUTUxdPVwibmFycmF0aXZlRGF0YVwiPjwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJ0ZXh0LXJpZ2h0XCI+XHJcbiAgICA8YnV0dG9uIG1hdC1idXR0b24gKGNsaWNrKT1cImNsb3NlTmFycmF0aXZlUG9wdXAoKVwiIGNsYXNzPVwiYnRuIGJ0bi1jYW5jZWwgbXItMlwiPkNsb3NlPC9idXR0b24+XHJcbiAgPC9kaXY+XHJcbjwvbmctdGVtcGxhdGU+IC0tPlxyXG4iXX0=